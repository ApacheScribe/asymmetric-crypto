package au.com.xandar.crypto;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**
 * Tests RandomSymmetricCipher.
 */
public class CryptPacketConverterTest {

    private final CryptoPacketConverter cryptoPacketConverter = new CryptoPacketConverter();

    @Before
    public void setUp() {
        System.out.println();
    }

    @Test
    public void testCryptoPacketConversion1() throws CryptoException {

        final byte[] ENCRYPTED_DATA = {
            -51, -66, 6, -19, -91, -15, -38, 6, 3, -82, -43, -27, 25, 114, 60, -7, -19, -109, 108, 122, -54, -76, -54, -121,
            -73, -37, 82, -49, 77, 24, 35, 89, -121, -14, 59, 125, -93, 119, -50, 33, 124, -51, -89, 51, 93, -19, -103, -95,
            -82, 20, 110, -19, -18, -116, 117, 100, -103, -113, 40, 107, -60, -111, -22, -16, 103, 49, -89, -107, -42, -102,
            -13, 110, 117, -84, 71, 120, 118, -114, 4, 11, 117, -127, -81, -14, 51, -93, -52, 16, 89, -42, 101, -89, -65, -65,
            -105, -94, -101, 95, 114, 63, -123, 103, -108, -40, 109, 20, 124, 118, 115, 79, 13, -43, -82, 44, 113, -55, 72,
            2, -47, 37, -29, -18, 114, -17, 95, 110, 19, -13, 84, -24, 101, -105, 38, -105, 89, -110, -46, 103, 99, -117, 116,
            88, -54, 78, 123, 54, -111, 117, 74, -52, 87, -93, -32, 69, -21, -78, 118, -125, -127, 76, 38, -19, 0, -1, 3, -29,
            -105, -65, -78, 108, 125, -120, -49, 123, 47, -85, 45, 5, 39, 84, 1, -73, 88, 127, 95, -73, 69, -56, 100, 103, 76,
            12, -51, -56, -31, -58, -50, 100, 120, -30, -22, -99, -126, -56, 29, -48, -81, 94, 116, 118, -122, -98, -72, -17,
            38, 91, -34, 41, -34, 12, -112, 63, -76, 5, 15, -81, -70, -128, -9, -78, 92, 13, -75, 20, -40, 57, 30, -19, 85,
            102, 23, -93, 2, -123, -120, -51, -47, -100, 34, -11, 18, 36, -97, 126, 20, 43, 96, 124, -114, -37, 68, 43, -107,
            7, 113, -111, -39, 112, -86, -99, -58, 4, -61, -58, -108, -83, 62, -51, 112, -51, 116, 101, -68, -15, 44, -44, 19,
            99, -41, -71, 73, -47, -103, -86, 65, 65, -121, -46, -114, 86, -53, -99, 118, -82, 36, 86, 41, -25, -30, 17, -101,
            15, -34, -10, 79, 69, 91, 93, -96, -114, 78, 31, 80, 54, 91, -95, -86, 83, -96, 20, -31, -22, 83, 63, 45, 78, -19,
            25, -25, -115, 124, -88, -36, -115, -70, -74, 73, -31, -40, -115, 11, -112, -86, -91, -16, 20, -18, 79, -75, -30,
            -4, -66, -49, -14, 91, -92, -5, 77, 45, 83, -15, 89, -104, -27, -5, -82, 45, 80, -100, -79, -37, -44, 88, 77, 88,
            -97, 5, 103, 28, 124, 26, 61, -23, -45, -21, 118, -119, 102, 14, -124, -69, -66, -71, 28, 19, -106, -46, -18, 92,
            -25, 56, 83, 78, -98, 23, 83, -56, 29, -32, -123, -110, -54, -19, 113, -123, -72, 91, 74, -67, -14, 107, -113, 67,
            -38, -31, -101, -52, 17, 72, 86, -32, 19, 50, 102, 54, 81, -11, 98, 105, 17, 114, -6, -113, 40, -34, -90, -56, 69,
            -73, 1, -3, 125, -36, -120, 92, -102, -99, -82, -115, 31, 95, 110, 37, 60, 120, 30, 69, 56, 33, 114, -98, 24, 20,
            86, 86, 100, 27, 28, 42, 118, -106, 125, 3, 51, 37, 0, 99, 48, -43, 73, -50, -55, 56, 44, -108, 18, 12, -81, 45,
            -26, 46, 50, 124, 0, 29, -111, -93, 20, 61, 48, 115, 61, -39, -53, -108, 93, 56, -15, -26, -25, 89, -101, -61, -101,
            56, -112, -126, 27, 112, -98, -57, -46, 18, -24, 44, -126, 6, 92, -86, -107, 127, -120, 122, -20, 58, 59, -23, -7,
            127, 119, -111, -127, 63, 89, -37, -35, 63, 46, 110, -99, 78, -62, 16, -29, -58, 89, 17, -30, -33, 4, 82, 29, -36,
            126, -80, -101, -10, 49, 35, 7, -17, -88, 124, 30, 99, -77, 117, 46, -102, 60, -107, -46, -15, 33, 67, -98, 72,
            -122, 86, 121, -107, 48, 93, -25, -68, -101, -11, 53, 115, -75, 60, 28, -6, 14, 87, -12, 108, 51, 71, -10, 74, 99,
            4, 43, -65, 105, 37, 32, 45, -77, -85, 43, 38, -11, 90, -35, -46, -20, -104, 57, -115, -103, 122, 8, -119, 22, -43,
            -21, -3, -77, 23, 68, -55, 103, -115, -70, -31, -55, 9, 10, -113, 103, -89, -53, -30, 86, 13, 81, 33, 36, -10, 79,
            -58, 90, -46, 101, -118, -20, 122, -123, -125, 33, 24, 93, 126, 125, -104, 69, -117, -10, 47, 55, 8, -5, -79, -49,
            -110, 70, -91, 37, -33, -101, 96, -17, 113, 108, 24, -84, 16, -121, 93, 64, -99, -93, -11, 39, -13, -74, -1, -92,
            -62, 64, 54, -113, 92, -98, -53, 76, -2, -47, 96, 123, -63, -118, -116, 63, 5, -88, -88, -15, 108, -40, 9, 96, -89,
            124, -112, 12, 4, -52, -66, -91, 6, -121, 1, -2, 6, -38, 97, -17, -4, -46, -93, 11, 121, 30, -38, -101, -106, 36,
            -47, -63, 31, -80, -124, -125, -95, 118, -115, 106, -101, -47, 19, 100, -71, -7, -51, 92, 3, -106, -118, -114, 13,
            19, -1, -51, -1, 94, 114, 113, 79, 93, -32, -90, -40, 73, 99, 111, -39, -56, -64, 86, -68, -34, 24, -127, -27, 84,
            -64, 61, 17, 33, 26, -83, 70, 49, 110, -86, 45, -15, -39, -104, 5, -23, -99, 14, -7, 22, 51, -31, 0, 71, -125, -118,
            37, -116, -72, -96, 4, 99, 22, 54, 29, -60, -115, 112, 125, -40, -32, -33, -8, 115, 7, -106, -71, -31, 13, 126, 26,
            9, -97, -33, 73, -31, -40, 40, 23, -76, -121, -102, -2, -112, 29, 10, -112, 104, 92, -36, 27, -33, -122, -2, 77,
            -128, -111, -90, -34, -33, -128, -39, -89, 34, -46, 65, 67, -60, -59, -58, -122, 39, 125, 71, -81, -108, 63, -115,
            6, 55, 119, -18, 111, -96, -108, -32, -17, 60, -104, 65, 35, 4, 50, -70, 2, 124, -51, -73, -84, 61, -10, 33, 9,
            -22, 97, 121, -38, -128, -80, -58, 75, 17, 4, 1, 127, -25, -119, -126, 120, 109, -11, -126, 13, -85, -40, -20, -13,
            106, 54, -75, -97, 64, 83, -86, 35, 90, -51, -75, 15, 46, 4, -8, -100, 49, -30, 77, -111, -3, 21, -44, -87, 30,
            71, -80, -45, -69, -128, 113, -75, -40
        };

        final byte[] ENCRYPTED_SYMMETRIC_KEY = {
            69, -104, -61, 66, -42, -21, -89, 1, -77, -62, -97, -59, 6, 127, 54, 112, 38, 124, 11, -21, 60, 54, -98, 4, 15, 23,
            119, -124, -36, 43, -36, 109, -20, 117, 76, 46, -70, 35, -125, -34, 49, -78, -31, 30, -103, -128, 36, -20, -71, -79,
            -119, 120, -57, -66, -47, 93, 85, -99, -74, -34, 90, 46, -63, 93, 93, -107, -108, -106, 101, -12, 109, -14, -109,
            -32, 7, 52, -125, -107, -80, -58, 49, -94, -64, -66, -93, -66, 62, -15, -29, 35, 39, -102, -8, 43, 96, -107, -81,
            46, 39, -52, -126, 125, 37, 1, 54, 38, 12, -13, -28, 42, -69, -119, 87, 64, -51, -90, -67, -71, -14, -33, 52, 48,
            9, 26, 88, 65, -79, -39
        };

        final byte[] SYMMETRIC_CIPHER_INITIALIZATION_VECTOR = {
            127, -18, -33, -106, -71, -113, -119, -121
        };

        final CryptoPacket cryptoPacket = new CryptoPacket(ENCRYPTED_DATA, ENCRYPTED_SYMMETRIC_KEY, SYMMETRIC_CIPHER_INITIALIZATION_VECTOR);
        final String base64EncryptedData = cryptoPacketConverter.convert(cryptoPacket);
        final CryptoPacket outputPacket = cryptoPacketConverter.convert(base64EncryptedData);

        Assert.assertArrayEquals(cryptoPacket.getEncryptedData(), outputPacket.getEncryptedData());
        Assert.assertArrayEquals(cryptoPacket.getEncryptedSymmetricKey(), outputPacket.getEncryptedSymmetricKey());
        Assert.assertArrayEquals(cryptoPacket.getSymmetricCipherInitializationVector(), outputPacket.getSymmetricCipherInitializationVector());
        Assert.assertEquals(cryptoPacket, outputPacket);
    }

    @Test
    public void cryptoPacketConversion2() throws CryptoException {
        final byte[] encryptedData = {
            74, -61, 22, -105, -77, -102, -112, -73, -68, -71, -44, -43, 121, -29, -70, 28, 125, -108, 112, 6, 125, 98, 90, 17, -18,
            33, -106, -21, 81, 0, 6, -60, 105, 120, -7, 110, -122, 79, 28, -86, 99, 127, 113, -84, -69, 22, 100, -7, 87, -99, -95,
            26, 109, 82, -33, 40, 11, 123, 57, 9, 54, 22, -60, 76, -52, 7, -26, -81, -12, -96, 18, 7, 86, -83, -22, -108, 36,
            -68, -16, 121, -78, -5, -32, 104, 108, -32, 124, 60, 95, -54, 102, 30, 53, 75, -38, 121, 101, -92, 23, -64, 103, -128, 21,
            90, 14, -103, -44, -41, 74, -15, -71, -26, -116, -98, -58, -80, -2, -112, -107, -60, 59, 30, 48, 99, -7, -102, -10, 40, 106,
            -1, 78, -44, -51, -39, 127, 90, -33, -120, 60, 46, -55, -92, -72, 44, -78, 97, 71, 68, -124, 104, -86, -93, 78, 5, -44,
            91, -92, -8, -83, 51, 61, 70, -61, 75, -16, 125, 126, -103, 81, -15, -88, 92, 44, 80, 23, 45, -65, 43, 97, -42, -126,
            -9, 28, -47, -84, 3, 2, 112, 13, 118, -76, -5, -68, -115, 65, -111, -64, 0, -25, -3, 27, 94, -80, 48, 91, -55, -92,
            53, 117, -46, 29, 37, 55, 101, -84, 106, -9, 35, -48, 127, 124, 88, -123, -14, 64, 33, 25, -82, -40, -44, 3, 46, 124,
            -67, 32, -82, -117, 103, -42, -14, -22, 21, 1, 76, -32, -100, -97, 44, 115, 122, -58, 26, -48, -12, -42, 14, 20, 19, -24,
            -116, 70, -6, 18, -19, -95, -29, 83, 29, -26, -68, 94, -102, -84, -124, -92, 91, 95, -13, 3, -14, 120, 66, 107, 43, 25,
            29, -85, -31, -66, 73, 100, -63, -36, -99, 75, 127, 106, 108, 49, -99, -66, 112, 58, 5, -14, -80, 39, 10, -35, -86, -34,
            108, 110, -32, -126, 39, -26, 62, 28, -20, -15, -53, -60, 50, -77, -71, -112, 79, -16, 76, 96, 11, -12, -96, -58, 96, 90,
            -80, -86, 104, -68, 13, -19, -61, -74, -96, -88, -76, -71, 34, -10, -78, -95, -124, -67, -73, -22, 11, -5, 65, 36, -65, -116,
            64, 8, -118, 40, -57, 107, -26, -93, -70, 126, 21, -112, 32, -108, 47, -86, 6, -79, -20, 125, -31, 5, 35, 68, -115, -38,
            -39, 63, 7, 18, -34, -8, -110, 46, 78, 4, -83, 15, 34, -60, 3, 78, -10, 45, -118, 83, -25, 93, 83, 10, 54, -94,
            59, -35, 52, -95, -102, -12, 111, -96, -91, 46, 107, 94, -112, 88, 44, -87, -117, 82, 40, -109, 122, 52, 44, 87, 62, -12,
            100, -100, -117, 51, 126, 38, -86, 37, 76, 81, -46, -5, -44, -76, -86, 34, -29, -116, -77, 62, 91, -55, -6, -94, 5, 20,
            77, -39, -52, -19, -85, 7, 61, 50, 46, -111, 32, 108, 54, -24, -109, -45, 15, 127, -52, -17, -54, -59, 60, -124, 47, 74,
            -43, -13, -110, -83, 13, -46, -11, -3, 6, -62, -92, 7, 41, 22, -47, 102, 48, -86, 26, -100, -4, 71, -76, -36, 63, 5,
            -125, 105, 13, 12, 71, -91, 127, 120, 8, 60, 98, 101, 61, 16, 93, -47, 86
        };
        final byte[] encryptedSymmetricKey = {
            53, -24, 4, 74, -7, -51, -21, -32, -72, 125, -17, 81, -79, 79, -55, -13, 91, -17, -15, 62, -92, 36, -18, 88, -73,
            126, 83, 106, 6, 28, 14, 64, 37, 25, -61, -28, -100, 61, 4, 65, -36, -117, -121, -8, -117, -19, 70, -65, -17, -70, 46,
            -94, -122, 11, -1, 98, 65, 40, 120, -13, 64, 80, 58, 112, 11, 4, 60, -80, -70, -4, -91, 4, -54, -126, 4, -4, -23,
            58, -35, 124, -41, -28, -45, 41, -8, 60, 24, 53, -112, 102, -80, 30, -49, 39, 83, 40, 50, 44, 29, -47, -52, -104, -91,
            54, -92, 125, 77, -61, 96, 74, 79, 93, -3, -46, 93, -91, -50, 25, -109, 126, 47, 64, 108, -98, 76, 111, 42, -5
        };
        final byte[] symmetricCipherInitializationVector = {115, -13, -90, -75, 83, -77, 106, 21};

        final CryptoPacket cryptoPacket = new CryptoPacket(encryptedData, encryptedSymmetricKey, symmetricCipherInitializationVector);
        final String base64EncryptedData = cryptoPacketConverter.convert(cryptoPacket);
        final CryptoPacket outputPacket = cryptoPacketConverter.convert(base64EncryptedData);

        Assert.assertArrayEquals(cryptoPacket.getEncryptedData(), outputPacket.getEncryptedData());
        Assert.assertArrayEquals(cryptoPacket.getEncryptedSymmetricKey(), outputPacket.getEncryptedSymmetricKey());
        Assert.assertArrayEquals(cryptoPacket.getSymmetricCipherInitializationVector(), outputPacket.getSymmetricCipherInitializationVector());
        Assert.assertEquals(cryptoPacket, outputPacket);
    }
}
